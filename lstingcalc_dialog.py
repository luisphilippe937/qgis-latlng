# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LatlngcalcDialog
                                 A QGIS plugin
 Allows conversion of latitude and longitudes between decimal degrees and DMS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-02-15
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Luis Philippe GIS Projects
        email                : luisphilippe937@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'lstingcalc_dialog_base.ui'))


class LatlngcalcDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(LatlngcalcDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        self.spbLatD.valueChanged.connect(self.latDMStoDD)   ## chama a função latDMStoDD para colocar a última caixinha (spbLatDD) com mesmo valor da primeira caixinha (spbLatD)
        self.spbLatM.valueChanged.connect(self.latDMStoDD)
        self.spbLatS.valueChanged.connect(self.latDMStoDD)
        self.cmbLatH.currentTextChanged.connect(self.latDMStoDD)
        
        self.spbLngD.valueChanged.connect(self.lngDMStoDD)   ## faz o mesmo das linhas anteriores, mas agora para a longitude
        self.spbLngM.valueChanged.connect(self.lngDMStoDD)
        self.spbLngS.valueChanged.connect(self.lngDMStoDD)
        self.cmbLngH.currentTextChanged.connect(self.lngDMStoDD)
        
        
        self.spbLatDD.editingFinished.connect(self.latDDtoDMS) ##quando usuário pressiona ENTER após colocar graus decimais, muda-se os campos de graus, min e seg da Latitude
        self.spbLngDD.editingFinished.connect(self.lngDDtoDMS)
        
        
    def latDMStoDD(self):         ## criando a função
        iDeg = self.spbLatD.value()   ##colocando a variável da primeira caixinha (spbLatD) na variável iDeg
        iMin = self.spbLatM.value()
        dSec = self.spbLatS.value()
        sHem = self.cmbLatH.currentText()       ##"string hemisfere", que vai definir se a lat é positiva ou negativa
        
        dDD = float (iDeg + iMin/60 + dSec/3600)               ## definindo dDD como o valor float de (iDeg + iMin/60 + dSec/3600)
        if sHem == "S":     ## se a latitude for Sul, então o valor deve ser negativo
            dDD = dDD * -1
        
        self.spbLatDD.setValue(dDD)     ## inserindo esse valor dDD na última caixinha da interface gráfica do plugin sempre que valor mudar (observar "self.spbLatD.valueChanged.connect(self.latDMStoDD)")
        
    def lngDMStoDD(self):         ## criando a função de forma semelhante à função anterior, mas agora para longitude
        iDeg = self.spbLngD.value()   
        iMin = self.spbLngM.value()
        dSec = self.spbLngS.value()
        sHem = self.cmbLngH.currentText()       
        
        dDD = float (iDeg + iMin/60 + dSec/3600)               
        if sHem == "W":    ## se a longitude for W, ela será negativa
            dDD = dDD * -1
        
        self.spbLngDD.setValue(dDD)     
             
    
    def latDDtoDMS(self):    ## definindo a função que altera os valores das caixinhas de g, m e s de acordo com o inserido em graus decimais
        dDD = self.spbLatDD.value()  ##lendo o valor em spbLatDD, que é a última caixinha
        
        
        iDeg = int(dDD)  ## definindo o inteiro de graus
        dMin = (dDD - iDeg) * 60 
        iMin = int(dMin)        ## definindo o inteiro de min
        dSec = (dMin-iMin) * 60  ## def segundos
        
        self.spbLatD.setValue(abs(iDeg))   ## inserindo os valores aos spinbox
        self.spbLatM.setValue(abs(iMin))
        self.spbLatS.setValue(abs(dSec))
        
        if dDD < 0:     ## quando valor for negativo
            self.cmbLatH.setCurrentText("S")
        else:
            self.cmbLatH.setCurrentText("N")
            
        
        
    def lngDDtoDMS(self):    ## a mesma função anterior, mas para Longitude
        dDD = self.spbLngDD.value()  
        
        
        iDeg = int(dDD)  
        dMin = (dDD - iDeg) * 60 
        iMin = int(dMin)        
        dSec = (dMin-iMin) * 60  
        
        self.spbLngD.setValue(abs(iDeg))  
        self.spbLngM.setValue(abs(iMin))
        self.spbLngS.setValue(abs(dSec))
        
        if dDD < 0:     
            self.cmbLngH.setCurrentText("W")
        else:
            self.cmbLngH.setCurrentText("E")        
        